{
    "framework_name": "DSV (Deconstruct, Synthesize, and Verify)",
    "version": "1.0.0",
    "description": "A white-box, structure-driven natural language to MTL conversion framework",
    
    "agents": {
        "analyst": {
            "name": "Analyst_Agent",
            "role": "Semantic Analyst",
            "description": "Responsible for deconstructing natural language into structured semantic components",
            "model": "deepseek-reasoner",
            "temperature": 0.7,
            "api_key_env": "DEEPSEEK_API_KEY",
            "base_url_env": "DEEPSEEK_API_URL",
            "specialization": "Semantic Deconstruction and Component Extraction"
        },
        "synthesizer": {
            "name": "Synthesizer_Agent", 
            "role": "Formula Synthesizer",
            "description": "Responsible for synthesizing syntactically correct MTL formulas from semantic components",
            "model": "deepseek-reasoner",
            "temperature": 0.7,
            "api_key_env": "DEEPSEEK_API_KEY",
            "base_url_env": "DEEPSEEK_API_URL",
            "specialization": "Syntactic Synthesis under Constraints"
        },
        "verifier": {
            "name": "Verifier_Agent",
            "role": "Verifier",
            "description": "Responsible for verifying the semantic correctness of MTL formulas through back-translation",
            "model": "deepseek-reasoner",
            "temperature": 0.7,
            "api_key_env": "DEEPSEEK_API_KEY",
            "base_url_env": "DEEPSEEK_API_URL",
            "specialization": "Iterative Verification and Correction"
        }
    },
    
    "processing_parameters": {
        "similarity_threshold": 0.85,
        "max_refinement_iterations": 3,
        "enable_refinement_loop": true,
        "similarity_model": "sentence-transformers/all-MiniLM-L6-v2"
    },
    
    "example_retrieval": {
        "enabled": true,
        "top_k": 3,
        "similarity_threshold": 0.3,
        "model": "sentence-transformers/all-MiniLM-L6-v2",
        "sources": [
            {
                "path": "data/examples/dsv_examples.json",
                "type": "json",
                "stages": ["deconstruct", "synthesize", "verify"]
            }
        ]
    },
    
    "mtl_syntax": {
        "temporal_operators": {
            "G": "Globally (Always)",
            "F": "Finally (Eventually)", 
            "X": "Next",
            "U": "Until",
            "P": "Past",
            "O": "Once"
        },
        "metric_operators": {
            "G_[a,b]": "Globally within time interval [a,b]",
            "F_[a,b]": "Finally within time interval [a,b]",
            "U_[a,b]": "Until within time interval [a,b]"
        },
        "logical_operators": {
            "∧": "AND",
            "∨": "OR", 
            "¬": "NOT",
            "→": "IMPLIES",
            "↔": "EQUIVALENCE"
        }
    },
    
    "semantic_components": {
        "atomic_propositions": {
            "description": "The basic units that describe the status or events of a system",
            "required_fields": ["id", "description", "variable"]
        },
        "temporal_relations": {
            "description": "The temporal relations between atomic propositions",
            "types": ["after", "before", "during", "simultaneously", "within"],
            "required_fields": ["type", "antecedent", "consequent", "description"]
        },
        "metric_constraints": {
            "description": "Precise time constraints related to temporal relationships",
            "types": ["window", "duration", "delay", "deadline"],
            "required_fields": ["applies_to", "type", "value", "description"]
        },
        "global_properties": {
            "description": "The scope of the entire specification",
            "types": ["Always", "Eventually", "Never", "Sometimes"]
        }
    },
    
    "ablation_studies": {
        "enabled": true,
        "experiments": {
            "no_dynamic_prompts": {
                "description": "Remove dynamic prompt generation module, using original DSV framework (no example enhancement)",
                "enabled": true
            }
        }
    },
    
    "evaluation": {
        "metrics": ["accuracy", "bleu score"],
        "comparison_baselines": [],
        "test_datasets": ["traffic_rules", "system_specifications", "temporal_properties"]
    },
    
    "logging": {
        "level": "INFO",
        "save_detailed_logs": true,
        "log_file": "logs/dsv_framework.log",
        "save_stage_details": true,
        "save_semantic_sketches": true
    },
    
    "output": {
        "save_intermediate_results": true,
        "save_semantic_sketches": true,
        "save_synthesis_reasoning": true,
        "save_verification_details": true,
        "output_format": "json"
    }
}
