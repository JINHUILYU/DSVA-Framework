{
  "framework": "DSV Example Database - Expanded Version",
  "description": "Comprehensive examples with 10 cases per stage covering diverse traffic scenarios",
  "version": "3.0",
  "examples": {
    "deconstruct": [
      {
        "id": "dec_001",
        "input_text": "if Ego vehicle in front of other vehicle then it must not brake suddenly without a compelling reason.",
        "stage": "deconstruct",
        "output": "{\n  \"objects\": [\n    {\"id\": \"obj_ego\", \"name\": \"ego\", \"type\": \"vehicle\"},\n    {\"id\": \"obj_other\", \"name\": \"other\", \"type\": \"vehicle\"}\n  ],\n  \"atomic_propositions\": [\n    {\n      \"id\": \"ap_1\",\n      \"object\": \"obj_ego\",\n      \"related_object\": \"obj_other\",\n      \"predicate\": \"in_front_of\",\n      \"variable\": \"ego_in_front\",\n      \"description\": \"Ego vehicle is in front of other vehicle\"\n    },\n    {\n      \"id\": \"ap_2\",\n      \"object\": \"obj_ego\",\n      \"predicate\": \"sudden_braking\",\n      \"variable\": \"ego_brakes\",\n      \"description\": \"Ego vehicle brakes suddenly\"\n    }\n  ],\n  \"temporal_relations\": [\n    {\n      \"type\": \"conditional\",\n      \"antecedent\": \"ap_1\",\n      \"consequent\": \"~ap_2\",\n      \"description\": \"If ego in front of other, then ego must not brake suddenly\"\n    }\n  ],\n  \"metric_constraints\": [],\n  \"global_property\": \"Always\",\n  \"lexicon\": {\n    \"ego_in_front\": {\"entity\": \"ego\", \"action\": \"in front of\", \"related_entity\": \"other\"},\n    \"ego_brakes\": {\"entity\": \"ego\", \"action\": \"brakes suddenly\"}\n  }\n}",
        "reasoning": "Two vehicle objects with relational predicate in_front_of. Conditional prohibition of sudden braking."
      },
      {
        "id": "dec_002",
        "input_text": "At intersections and junctions, ego must yield to vehicles coming from right side of ego, provided there is no traffic sign number 306 in front of ego.",
        "stage": "deconstruct",
        "output": "{\n  \"objects\": [\n    {\"id\": \"obj_ego\", \"name\": \"ego\", \"type\": \"vehicle\"},\n    {\"id\": \"obj_other\", \"name\": \"other\", \"type\": \"vehicle\"},\n    {\"id\": \"obj_sign\", \"name\": \"sign_306\", \"type\": \"traffic_sign\"}\n  ],\n  \"atomic_propositions\": [\n    {\n      \"id\": \"ap_1\",\n      \"object\": \"obj_ego\",\n      \"predicate\": \"at_intersection\",\n      \"variable\": \"ego_at_intersection\",\n      \"description\": \"Ego is at intersection\"\n    },\n    {\n      \"id\": \"ap_2\",\n      \"object\": \"obj_ego\",\n      \"predicate\": \"at_junction\",\n      \"variable\": \"ego_at_junction\",\n      \"description\": \"Ego is at junction\"\n    },\n    {\n      \"id\": \"ap_3\",\n      \"object\": \"obj_other\",\n      \"related_object\": \"obj_ego\",\n      \"predicate\": \"in_right_of\",\n      \"variable\": \"other_on_right\",\n      \"description\": \"Other vehicle is on right side of ego\"\n    },\n    {\n      \"id\": \"ap_4\",\n      \"object\": \"obj_ego\",\n      \"related_object\": \"obj_other\",\n      \"predicate\": \"yield\",\n      \"variable\": \"ego_yields\",\n      \"description\": \"Ego yields to other vehicle\"\n    },\n    {\n      \"id\": \"ap_5\",\n      \"object\": \"obj_sign\",\n      \"related_object\": \"obj_ego\",\n      \"predicate\": \"in_front_of\",\n      \"variable\": \"sign_in_front\",\n      \"description\": \"Sign 306 is in front of ego\"\n    }\n  ],\n  \"temporal_relations\": [\n    {\n      \"type\": \"conditional\",\n      \"antecedent\": \"(ap_1 | ap_2) & ap_3 & ~ap_5\",\n      \"consequent\": \"ap_4\",\n      \"description\": \"At intersection/junction with vehicle on right and no sign 306, ego must yield\"\n    }\n  ],\n  \"metric_constraints\": [],\n  \"global_property\": \"Always\",\n  \"lexicon\": {\n    \"ego_at_intersection\": {\"entity\": \"ego\", \"action\": \"at intersection\"},\n    \"ego_at_junction\": {\"entity\": \"ego\", \"action\": \"at junction\"},\n    \"other_on_right\": {\"entity\": \"other\", \"action\": \"on right side of\", \"related_entity\": \"ego\"},\n    \"ego_yields\": {\"entity\": \"ego\", \"action\": \"yields to\", \"related_entity\": \"other\"},\n    \"sign_in_front\": {\"entity\": \"sign_306\", \"action\": \"in front of\", \"related_entity\": \"ego\"}\n  }\n}",
        "reasoning": "Three objects (two vehicles, one traffic sign). Complex conditional with disjunction, conjunction, and negation."
      },
      {
        "id": "dec_003",
        "input_text": "If ego vehicle wants to overtake the other vehicle then it should use turn signals beforehand for t seconds.",
        "stage": "deconstruct",
        "output": "{\n  \"objects\": [\n    {\"id\": \"obj_ego\", \"name\": \"ego\", \"type\": \"vehicle\"},\n    {\"id\": \"obj_other\", \"name\": \"other\", \"type\": \"vehicle\"}\n  ],\n  \"atomic_propositions\": [\n    {\n      \"id\": \"ap_1\",\n      \"object\": \"obj_ego\",\n      \"related_object\": \"obj_other\",\n      \"predicate\": \"overtake\",\n      \"variable\": \"ego_overtakes\",\n      \"description\": \"Ego vehicle overtakes other vehicle\"\n    },\n    {\n      \"id\": \"ap_2\",\n      \"object\": \"obj_ego\",\n      \"predicate\": \"turn_signal\",\n      \"variable\": \"turn_signal_active\",\n      \"description\": \"Ego vehicle uses turn signals\"\n    }\n  ],\n  \"temporal_relations\": [\n    {\n      \"type\": \"past_precondition\",\n      \"antecedent\": \"ap_1\",\n      \"consequent\": \"ap_2\",\n      \"description\": \"Turn signals must be active before overtaking\"\n    }\n  ],\n  \"metric_constraints\": [\n    {\n      \"applies_to\": \"relation_between_ap2_ap1\",\n      \"type\": \"past_window\",\n      \"value\": \"[0,t]\",\n      \"description\": \"Turn signal must be active for t seconds before overtaking\"\n    }\n  ],\n  \"global_property\": \"Always\",\n  \"lexicon\": {\n    \"ego_overtakes\": {\"entity\": \"ego\", \"action\": \"overtakes\", \"related_entity\": \"other\"},\n    \"turn_signal_active\": {\"entity\": \"ego\", \"action\": \"uses turn signals\"}\n  }\n}",
        "reasoning": "Past temporal constraint: action must be preceded by signal for t seconds. Uses P (past) operator."
      },
      {
        "id": "dec_004",
        "input_text": "The ego vehicle has to stop with respect to a stop sign (sign 206) before it enters the intersection at least for a duration of tslw in front of the associated stop line.",
        "stage": "deconstruct",
        "output": "{\n  \"objects\": [\n    {\"id\": \"obj_ego\", \"name\": \"ego\", \"type\": \"vehicle\"},\n    {\"id\": \"obj_sign\", \"name\": \"sign_206\", \"type\": \"traffic_sign\"},\n    {\"id\": \"obj_stop_line\", \"name\": \"stop_line\", \"type\": \"road_marking\"}\n  ],\n  \"atomic_propositions\": [\n    {\n      \"id\": \"ap_1\",\n      \"object\": \"obj_ego\",\n      \"predicate\": \"at_intersection\",\n      \"variable\": \"ego_at_intersection\",\n      \"description\": \"Ego is at intersection\"\n    },\n    {\n      \"id\": \"ap_2\",\n      \"object\": \"obj_ego\",\n      \"related_object\": \"obj_sign\",\n      \"predicate\": \"at_traffic_sign\",\n      \"variable\": \"at_stop_sign\",\n      \"description\": \"Ego is at stop sign 206\"\n    },\n    {\n      \"id\": \"ap_3\",\n      \"object\": \"obj_ego\",\n      \"predicate\": \"in_standstill\",\n      \"variable\": \"ego_stopped\",\n      \"description\": \"Ego vehicle is in standstill\"\n    }\n  ],\n  \"temporal_relations\": [\n    {\n      \"type\": \"conditional\",\n      \"antecedent\": \"ap_1 & ap_2\",\n      \"consequent\": \"ap_3\",\n      \"description\": \"At intersection with stop sign, ego must be in standstill\"\n    }\n  ],\n  \"metric_constraints\": [\n    {\n      \"applies_to\": \"ap_3\",\n      \"type\": \"duration\",\n      \"value\": \"[0,tslw]\",\n      \"description\": \"Ego must remain stopped for at least tslw duration\"\n    }\n  ],\n  \"global_property\": \"Always\",\n  \"lexicon\": {\n    \"ego_at_intersection\": {\"entity\": \"ego\", \"action\": \"at intersection\"},\n    \"at_stop_sign\": {\"entity\": \"ego\", \"action\": \"at stop sign\", \"related_entity\": \"sign_206\"},\n    \"ego_stopped\": {\"entity\": \"ego\", \"action\": \"in standstill\"}\n  }\n}",
        "reasoning": "Duration constraint with minimum time requirement. Three object types: vehicle, traffic sign, road marking."
      },
      {
        "id": "dec_005",
        "input_text": "ego shall not overtake another vehicle if a pedestrian crosswalk is in front of the other vehicle.",
        "stage": "deconstruct",
        "output": "{\n  \"objects\": [\n    {\"id\": \"obj_ego\", \"name\": \"ego\", \"type\": \"vehicle\"},\n    {\"id\": \"obj_other\", \"name\": \"other\", \"type\": \"vehicle\"},\n    {\"id\": \"obj_crosswalk\", \"name\": \"crosswalk\", \"type\": \"road_feature\"}\n  ],\n  \"atomic_propositions\": [\n    {\n      \"id\": \"ap_1\",\n      \"object\": \"obj_crosswalk\",\n      \"related_object\": \"obj_other\",\n      \"predicate\": \"in_front_of\",\n      \"variable\": \"crosswalk_ahead\",\n      \"description\": \"Pedestrian crosswalk is in front of other vehicle\"\n    },\n    {\n      \"id\": \"ap_2\",\n      \"object\": \"obj_ego\",\n      \"related_object\": \"obj_other\",\n      \"predicate\": \"overtake\",\n      \"variable\": \"ego_overtakes\",\n      \"description\": \"Ego overtakes other vehicle\"\n    }\n  ],\n  \"temporal_relations\": [\n    {\n      \"type\": \"conditional\",\n      \"antecedent\": \"ap_1\",\n      \"consequent\": \"~ap_2\",\n      \"description\": \"If crosswalk in front of other, ego must not overtake\"\n    }\n  ],\n  \"metric_constraints\": [],\n  \"global_property\": \"Always\",\n  \"lexicon\": {\n    \"crosswalk_ahead\": {\"entity\": \"crosswalk\", \"action\": \"in front of\", \"related_entity\": \"other\"},\n    \"ego_overtakes\": {\"entity\": \"ego\", \"action\": \"overtakes\", \"related_entity\": \"other\"}\n  }\n}",
        "reasoning": "Three objects including road feature (crosswalk). Prohibition based on spatial relationship."
      },
      {
        "id": "dec_006",
        "input_text": "if there is a traffic light on the ego lane and the traffic color is red, the ego vehicle shall not exceed the stop lane.",
        "stage": "deconstruct",
        "output": "{\n  \"objects\": [\n    {\"id\": \"obj_ego\", \"name\": \"ego\", \"type\": \"vehicle\"},\n    {\"id\": \"obj_traffic_light\", \"name\": \"traffic_light\", \"type\": \"traffic_control\"},\n    {\"id\": \"obj_stop_line\", \"name\": \"stop_line\", \"type\": \"road_marking\"}\n  ],\n  \"atomic_propositions\": [\n    {\n      \"id\": \"ap_1\",\n      \"object\": \"obj_traffic_light\",\n      \"related_object\": \"obj_ego\",\n      \"predicate\": \"red_light\",\n      \"variable\": \"red_light_active\",\n      \"description\": \"Traffic light is red for ego\"\n    },\n    {\n      \"id\": \"ap_2\",\n      \"object\": \"obj_stop_line\",\n      \"related_object\": \"obj_ego\",\n      \"predicate\": \"in_front_of\",\n      \"variable\": \"stop_line_ahead\",\n      \"description\": \"Stop line is in front of ego\"\n    },\n    {\n      \"id\": \"ap_3\",\n      \"object\": \"obj_ego\",\n      \"related_object\": \"obj_stop_line\",\n      \"predicate\": \"exceed_stop_line\",\n      \"variable\": \"exceed_line\",\n      \"description\": \"Ego exceeds stop line\"\n    }\n  ],\n  \"temporal_relations\": [\n    {\n      \"type\": \"conditional\",\n      \"antecedent\": \"ap_1 & ap_2\",\n      \"consequent\": \"~ap_3\",\n      \"description\": \"With red light and stop line ahead, ego must not exceed line\"\n    }\n  ],\n  \"metric_constraints\": [],\n  \"global_property\": \"Always\",\n  \"lexicon\": {\n    \"red_light_active\": {\"entity\": \"traffic_light\", \"action\": \"red for\", \"related_entity\": \"ego\"},\n    \"stop_line_ahead\": {\"entity\": \"stop_line\", \"action\": \"in front of\", \"related_entity\": \"ego\"},\n    \"exceed_line\": {\"entity\": \"ego\", \"action\": \"exceeds\", \"related_entity\": \"stop_line\"}\n  }\n}",
        "reasoning": "Traffic control scenario with traffic light state. Conditional prohibition with multiple antecedents."
      },
      {
        "id": "dec_007",
        "input_text": "If ego vehicle wants to change lanes, turn, or overtake, they should use their turn signals beforehand for t seconds.",
        "stage": "deconstruct",
        "output": "{\n  \"objects\": [\n    {\"id\": \"obj_ego\", \"name\": \"ego\", \"type\": \"vehicle\"}\n  ],\n  \"atomic_propositions\": [\n    {\n      \"id\": \"ap_1\",\n      \"object\": \"obj_ego\",\n      \"predicate\": \"change_lanes\",\n      \"variable\": \"changing_lanes\",\n      \"description\": \"Ego vehicle changes lanes\"\n    },\n    {\n      \"id\": \"ap_2\",\n      \"object\": \"obj_ego\",\n      \"predicate\": \"turn\",\n      \"variable\": \"turning\",\n      \"description\": \"Ego vehicle turns\"\n    },\n    {\n      \"id\": \"ap_3\",\n      \"object\": \"obj_ego\",\n      \"predicate\": \"overtake\",\n      \"variable\": \"overtaking\",\n      \"description\": \"Ego vehicle overtakes\"\n    },\n    {\n      \"id\": \"ap_4\",\n      \"object\": \"obj_ego\",\n      \"predicate\": \"turn_signals\",\n      \"variable\": \"signals_active\",\n      \"description\": \"Ego vehicle uses turn signals\"\n    }\n  ],\n  \"temporal_relations\": [\n    {\n      \"type\": \"past_precondition\",\n      \"antecedent\": \"ap_1 | ap_2 | ap_3\",\n      \"consequent\": \"ap_4\",\n      \"description\": \"Any of these maneuvers requires prior turn signal activation\"\n    }\n  ],\n  \"metric_constraints\": [\n    {\n      \"applies_to\": \"relation_between_ap4_ap123\",\n      \"type\": \"past_window\",\n      \"value\": \"[0,t]\",\n      \"description\": \"Turn signals must be active for t seconds before maneuver\"\n    }\n  ],\n  \"global_property\": \"Always\",\n  \"lexicon\": {\n    \"changing_lanes\": {\"entity\": \"ego\", \"action\": \"changes lanes\"},\n    \"turning\": {\"entity\": \"ego\", \"action\": \"turns\"},\n    \"overtaking\": {\"entity\": \"ego\", \"action\": \"overtakes\"},\n    \"signals_active\": {\"entity\": \"ego\", \"action\": \"uses turn signals\"}\n  }\n}",
        "reasoning": "Single object with multiple action disjunction. Past temporal constraint with time window."
      },
      {
        "id": "dec_008",
        "input_text": "ego vehicle will not exceed the speed limit of the lane it is driving on and it will not exceed the maximum velocity allowed for its vehicle type.",
        "stage": "deconstruct",
        "output": "{\n  \"objects\": [\n    {\"id\": \"obj_ego\", \"name\": \"ego\", \"type\": \"vehicle\"}\n  ],\n  \"atomic_propositions\": [\n    {\n      \"id\": \"ap_1\",\n      \"object\": \"obj_ego\",\n      \"predicate\": \"exceed_lane_speed_limit\",\n      \"variable\": \"exceed_lane_limit\",\n      \"description\": \"Ego exceeds lane speed limit\"\n    },\n    {\n      \"id\": \"ap_2\",\n      \"object\": \"obj_ego\",\n      \"predicate\": \"exceed_vehicle_type_limit\",\n      \"variable\": \"exceed_type_limit\",\n      \"description\": \"Ego exceeds vehicle type speed limit\"\n    }\n  ],\n  \"temporal_relations\": [\n    {\n      \"type\": \"unconditional\",\n      \"antecedent\": null,\n      \"consequent\": \"~ap_1 & ~ap_2\",\n      \"description\": \"Ego must not exceed either speed limit\"\n    }\n  ],\n  \"metric_constraints\": [],\n  \"global_property\": \"Always\",\n  \"lexicon\": {\n    \"exceed_lane_limit\": {\"entity\": \"ego\", \"action\": \"exceeds lane speed limit\"},\n    \"exceed_type_limit\": {\"entity\": \"ego\", \"action\": \"exceeds vehicle type speed limit\"}\n  }\n}",
        "reasoning": "Single object with multiple prohibition constraints. Unconditional conjunction of negations."
      },
      {
        "id": "dec_009",
        "input_text": "ego vehicle is on the road and there is a continuous line present on the road, then the ego vehicle must not cross or straddle the continuous line.",
        "stage": "deconstruct",
        "output": "{\n  \"objects\": [\n    {\"id\": \"obj_ego\", \"name\": \"ego\", \"type\": \"vehicle\"},\n    {\"id\": \"obj_line\", \"name\": \"solid_line\", \"type\": \"road_marking\"}\n  ],\n  \"atomic_propositions\": [\n    {\n      \"id\": \"ap_1\",\n      \"object\": \"obj_line\",\n      \"related_object\": \"obj_ego\",\n      \"predicate\": \"lane_marking_present\",\n      \"variable\": \"solid_line_present\",\n      \"description\": \"Solid line is present on ego's lane\"\n    },\n    {\n      \"id\": \"ap_2\",\n      \"object\": \"obj_ego\",\n      \"related_object\": \"obj_line\",\n      \"predicate\": \"crossing_line\",\n      \"variable\": \"crossing\",\n      \"description\": \"Ego crosses the line\"\n    },\n    {\n      \"id\": \"ap_3\",\n      \"object\": \"obj_ego\",\n      \"related_object\": \"obj_line\",\n      \"predicate\": \"straddle_line\",\n      \"variable\": \"straddling\",\n      \"description\": \"Ego straddles the line\"\n    }\n  ],\n  \"temporal_relations\": [\n    {\n      \"type\": \"conditional\",\n      \"antecedent\": \"ap_1\",\n      \"consequent\": \"~ap_2 & ~ap_3\",\n      \"description\": \"With solid line present, ego must not cross or straddle\"\n    }\n  ],\n  \"metric_constraints\": [],\n  \"global_property\": \"Always\",\n  \"lexicon\": {\n    \"solid_line_present\": {\"entity\": \"solid_line\", \"action\": \"present on lane of\", \"related_entity\": \"ego\"},\n    \"crossing\": {\"entity\": \"ego\", \"action\": \"crosses\", \"related_entity\": \"solid_line\"},\n    \"straddling\": {\"entity\": \"ego\", \"action\": \"straddles\", \"related_entity\": \"solid_line\"}\n  }\n}",
        "reasoning": "Road marking object with multiple prohibited interactions. Conjunction of negated consequences."
      },
      {
        "id": "dec_010",
        "input_text": "If ego Vehicle is driving behind another vehicle then it must maintain a safe distance until ego can overtake the other vehicle safely.",
        "stage": "deconstruct",
        "output": "{\n  \"objects\": [\n    {\"id\": \"obj_ego\", \"name\": \"ego\", \"type\": \"vehicle\"},\n    {\"id\": \"obj_other\", \"name\": \"other\", \"type\": \"vehicle\"}\n  ],\n  \"atomic_propositions\": [\n    {\n      \"id\": \"ap_1\",\n      \"object\": \"obj_ego\",\n      \"related_object\": \"obj_other\",\n      \"predicate\": \"behind\",\n      \"variable\": \"ego_behind\",\n      \"description\": \"Ego is behind other vehicle\"\n    },\n    {\n      \"id\": \"ap_2\",\n      \"object\": \"obj_ego\",\n      \"related_object\": \"obj_other\",\n      \"predicate\": \"safe_distance\",\n      \"variable\": \"safe_dist\",\n      \"description\": \"Ego maintains safe distance from other\"\n    },\n    {\n      \"id\": \"ap_3\",\n      \"object\": \"obj_ego\",\n      \"related_object\": \"obj_other\",\n      \"predicate\": \"overtake\",\n      \"variable\": \"ego_overtakes\",\n      \"description\": \"Ego overtakes other vehicle\"\n    }\n  ],\n  \"temporal_relations\": [\n    {\n      \"type\": \"until\",\n      \"antecedent\": \"ap_1\",\n      \"maintained\": \"ap_2\",\n      \"release\": \"ap_3\",\n      \"description\": \"When behind other, maintain safe distance until overtaking\"\n    }\n  ],\n  \"metric_constraints\": [],\n  \"global_property\": \"Always\",\n  \"lexicon\": {\n    \"ego_behind\": {\"entity\": \"ego\", \"action\": \"behind\", \"related_entity\": \"other\"},\n    \"safe_dist\": {\"entity\": \"ego\", \"action\": \"maintains safe distance from\", \"related_entity\": \"other\"},\n    \"ego_overtakes\": {\"entity\": \"ego\", \"action\": \"overtakes\", \"related_entity\": \"other\"}\n  }\n}",
        "reasoning": "Until temporal pattern: condition must hold continuously until release condition. Two vehicles with relational predicates."
      }
    ],
    "synthesize": [
      {
        "id": "syn_001",
        "input_text": "If ego in front of other, then ego must not brake suddenly",
        "stage": "synthesize",
        "output": "G(in_front_of(ego,other) -> ~sudden_braking(ego))",
        "reasoning": "Global always operator with conditional implication. Relational predicate in_front_of(ego,other) and unary predicate sudden_braking(ego)."
      },
      {
        "id": "syn_002",
        "input_text": "At intersection with vehicle on right and no sign 306, ego must yield",
        "stage": "synthesize",
        "output": "G((at_intersection(ego) | at_junction(ego)) & in_right_of(other,ego) & ~in_front_of(sign_306,ego) -> yield(ego,other))",
        "reasoning": "Complex antecedent with disjunction (intersection or junction), conjunction (vehicle on right), and negation (no sign). All predicates use object parameters."
      },
      {
        "id": "syn_003",
        "input_text": "If ego wants to overtake other, it should use turn signals beforehand for t seconds",
        "stage": "synthesize",
        "output": "G(overtake(ego,other) -> P[0,t](turn_signal(ego)))",
        "reasoning": "Past temporal operator P with time window [0,t]. Action must be preceded by signal within time window."
      },
      {
        "id": "syn_004",
        "input_text": "At intersection with stop sign 206, ego must stop for at least tslw duration",
        "stage": "synthesize",
        "output": "G((at_intersection(ego) & at_traffic_sign(ego,206)) -> G[0,tslw](in_standstill(ego)))",
        "reasoning": "Nested temporal operators: global always with bounded always G[0,tslw] for duration constraint. Traffic sign as parameter in predicate."
      },
      {
        "id": "syn_005",
        "input_text": "If crosswalk in front of other vehicle, ego must not overtake",
        "stage": "synthesize",
        "output": "G(in_front_of(crosswalk,other) -> ~overtake(ego,other))",
        "reasoning": "Three objects: ego, other, crosswalk. Relational predicates capture spatial relationships between all entities."
      },
      {
        "id": "syn_006",
        "input_text": "With red traffic light and stop line ahead, ego shall not exceed stop line",
        "stage": "synthesize",
        "output": "G((red_light(traffic_light,ego) & in_front_of(stop_line,ego)) -> ~exceed_stop_line(ego,stop_line))",
        "reasoning": "Traffic control scenario with multiple conditions. Predicates explicitly reference traffic light and stop line objects."
      },
      {
        "id": "syn_007",
        "input_text": "If ego changes lanes or turns or overtakes, turn signals must be active for t seconds before",
        "stage": "synthesize",
        "output": "G((change_lanes(ego) | turn(ego) | overtake(ego)) -> P[0,t](turn_signals(ego)))",
        "reasoning": "Disjunction of multiple actions, all requiring same past temporal precondition. Single ego object with multiple action predicates."
      },
      {
        "id": "syn_008",
        "input_text": "Ego must not exceed lane speed limit and must not exceed vehicle type speed limit",
        "stage": "synthesize",
        "output": "G(~exceed_lane_speed_limit(ego) & ~exceed_vehicle_type_limit(ego))",
        "reasoning": "Conjunction of negated predicates for multiple simultaneous prohibitions. Both predicates use ego as parameter."
      },
      {
        "id": "syn_009",
        "input_text": "With solid line present, ego must not cross or straddle the line",
        "stage": "synthesize",
        "output": "G(lane_marking_present(solid_line,ego) -> (~crossing_line(ego,solid_line) & ~straddle_line(ego,solid_line)))",
        "reasoning": "Road marking object with conditional prohibitions. Multiple negated consequences joined by conjunction."
      },
      {
        "id": "syn_010",
        "input_text": "When ego behind other, maintain safe distance until ego can overtake",
        "stage": "synthesize",
        "output": "G(behind(ego,other) -> (safe_distance(ego,other) U overtake(ego,other)))",
        "reasoning": "Until operator (U) expressing condition must hold continuously until release. All predicates explicitly reference both vehicle objects."
      }
    ],
    "verify": [
      {
        "id": "ver_001",
        "input_text": "G(in_front_of(ego,other) -> ~sudden_braking(ego))",
        "stage": "verify",
        "output": "Always, if the ego vehicle is in front of the other vehicle, then the ego vehicle must not brake suddenly.",
        "reasoning": "Relational predicate in_front_of(ego,other) translates to spatial relationship between two vehicles. Negation becomes prohibition."
      },
      {
        "id": "ver_002",
        "input_text": "G((at_intersection(ego) | at_junction(ego)) & in_right_of(other,ego) & ~in_front_of(sign_306,ego) -> yield(ego,other))",
        "stage": "verify",
        "output": "Always, if ego is at an intersection or junction, and another vehicle is on the right side of ego, and sign 306 is not in front of ego, then ego must yield to the other vehicle.",
        "reasoning": "Complex formula with disjunction (or), conjunction (and), and negation (not). Each predicate maps to clear spatial or action relationship."
      },
      {
        "id": "ver_003",
        "input_text": "G(overtake(ego,other) -> P[0,t](turn_signal(ego)))",
        "stage": "verify",
        "output": "Always, if ego vehicle overtakes another vehicle, then ego must have used turn signals for t seconds beforehand.",
        "reasoning": "Past operator P[0,t] translates to 'beforehand for t seconds'. Temporal precedence requirement."
      },
      {
        "id": "ver_004",
        "input_text": "G((at_intersection(ego) & at_traffic_sign(ego,206)) -> G[0,tslw](in_standstill(ego)))",
        "stage": "verify",
        "output": "Always, if ego is at an intersection and at stop sign 206, then ego must remain in standstill for at least tslw duration.",
        "reasoning": "Nested temporal operator G[0,tslw] translates to duration requirement. Traffic sign parameter (206) preserved in natural language."
      },
      {
        "id": "ver_005",
        "input_text": "G(in_front_of(crosswalk,other) -> ~overtake(ego,other))",
        "stage": "verify",
        "output": "Always, if a pedestrian crosswalk is in front of another vehicle, then ego must not overtake that vehicle.",
        "reasoning": "Three-entity relationship: crosswalk location relative to other vehicle determines ego's action. Prohibition expressed as 'must not'."
      },
      {
        "id": "ver_006",
        "input_text": "G((red_light(traffic_light,ego) & in_front_of(stop_line,ego)) -> ~exceed_stop_line(ego,stop_line))",
        "stage": "verify",
        "output": "Always, if the traffic light is red for ego and a stop line is in front of ego, then ego must not exceed the stop line.",
        "reasoning": "Traffic control scenario with state condition (red light) and spatial condition (stop line position). Objects explicitly named in translation."
      },
      {
        "id": "ver_007",
        "input_text": "G((change_lanes(ego) | turn(ego) | overtake(ego)) -> P[0,t](turn_signals(ego)))",
        "stage": "verify",
        "output": "Always, if ego vehicle changes lanes, or turns, or overtakes, then ego must have used turn signals for t seconds beforehand.",
        "reasoning": "Disjunction of actions translates to 'or' connectives. Past temporal requirement applies to any of the actions."
      },
      {
        "id": "ver_008",
        "input_text": "G(~exceed_lane_speed_limit(ego) & ~exceed_vehicle_type_limit(ego))",
        "stage": "verify",
        "output": "Always, ego must not exceed the lane speed limit and ego must not exceed the vehicle type speed limit.",
        "reasoning": "Conjunction of negations translates to multiple simultaneous prohibitions joined by 'and'."
      },
      {
        "id": "ver_009",
        "input_text": "G(lane_marking_present(solid_line,ego) -> (~crossing_line(ego,solid_line) & ~straddle_line(ego,solid_line)))",
        "stage": "verify",
        "output": "Always, if a solid line is present on ego's lane, then ego must not cross the line and ego must not straddle the line.",
        "reasoning": "Road marking condition leads to multiple prohibitions. Object (solid_line) explicitly referenced in both consequent predicates."
      },
      {
        "id": "ver_010",
        "input_text": "G(behind(ego,other) -> (safe_distance(ego,other) U overtake(ego,other)))",
        "stage": "verify",
        "output": "Always, if ego is behind another vehicle, then ego must maintain safe distance from the other vehicle until ego overtakes the other vehicle.",
        "reasoning": "Until operator (U) translates to 'until' expressing continuous requirement with eventual release condition. Both vehicles explicitly referenced."
      }
    ]
  }
}
